name: on_push

on: [push]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: public.ecr.aws/alchemyfr/ps-fake-databox-api-php


  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}


  # sent by workflow_dispatch from phrasea:on-push
  PHRASEA_TAG: ${{ github.event.client_payload.PHRASEA_TAG || '' }}
  # PHRASEA_TAG: master
  PHRASEA_REF: ${{ github.event.client_payload.PHRASEA_REF || '' }}

  # where to download from phrasea (releases on docker image(s) for applications doc(s) ; github repo for base doc)
  # PHRASEA_GITHUB: "alchemy-fr/phrasea"
  # PHRASEA_IMAGES: "public.ecr.aws/alchemyfr/ps-databox-api-php"
#  PHRASEA_GITHUB: "alchemy-fr/sandbox-ci-documentation"
#  PHRASEA_IMAGES: "ghcr.io/alchemy-fr/ps-fake-databox-api-php"

jobs:
  pull-ecr-images:
    runs-on: ubuntu-latest
    environment: sandbox-ci-documentation

    steps:
      - name: Dump vars
        run: |
          echo "===== on_push.yaml ====="
          echo "vars.PHRASEA_GITHUB = ${{ vars.PHRASEA_GITHUB }}"
          echo "vars.PHRASEA_IMAGES = ${{ vars.PHRASEA_IMAGES }}"
          echo "vars.PHRASEA_TAG = ${{ vars.PHRASEA_TAG }}"
          echo "vars.PHRASEA_REF = ${{ vars.PHRASEA_REF }}"
          echo "env.PHRASEA_GITHUB = ${{ env.PHRASEA_GITHUB }}"
          echo "env.PHRASEA_IMAGES = ${{ env.PHRASEA_IMAGES }}"
          echo "env.PHRASEA_TAG = ${{ env.PHRASEA_TAG }}"
          echo "env.PHRASEA_REF = ${{ env.PHRASEA_REF }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.sha = ${{ github.sha }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.repository = ${{ github.repository }}"
          echo "github.event.release.tag_name = ${{ github.event.release.tag_name }}"
          echo "github.event.client_payload.PHRASEA_TAG = ${{ github.event.client_payload.PHRASEA_TAG }}"
          echo "github.event.client_payload.PHRASEA_REF = ${{ github.event.client_payload.PHRASEA_REF }}"
          echo "env.REGISTRY = ${{ env.REGISTRY }}"
          echo "env.IMAGE_REGISTRY = ${{ env.IMAGE_REGISTRY }}"


#      - name: Configure AWS  Credentials
#        env:
#          AWS_ECR_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

#      - name: Authenticate Docker to ECR
#        run: |
#          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

#      - name: Login to Amazon ECR Public
#        id: login-ecr-public
#        uses: aws-actions/amazon-ecr-login@v2
#        with:
#          registry-type: public

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 30

      ### if we have a specific tag, prepare a single version of documentation

      - name: List and Pull single image
        if: ${{env.PHRASEA_TAG != ''}}
        run: |
          export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
          export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
          ./importer/download_tag.sh "${{env.PHRASEA_TAG}}"


      ### if we do not have a specific tag, prepare all x.y.z versions of documentation

      - name: List and Pull all images from releases
        if: ${{env.PHRASEA_TAG == ''}}
        run: |
          echo "Fetching tags from github:phrasea releases"
          # Fetch releases
          # -------- to not explode api limits, use a static file for tests -----------
          # response=$(curl -s "https://api.github.com/repos/${{vars.PHRASEA_GITHUB}}/releases")
          response=$(cat ./releases_sandbox.json)
          # ---------------------------------------------------------------------------
          # Check if the response is valid
          if [ $? -eq 0 ]; then
            export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
            export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
            # Loop through releases
            echo "$response" | jq -c '[.[]] |  map({"tag": .tag_name | split(".")  | {major: .[0], minor: .[1], patch: .[2], full: join(".")}, "all": .}) |group_by(.tag.major, .tag.minor) | map(max_by(.tag.patch).all) | .[]' | while read -r release; do
              tag_name=$(echo "$release" | jq -r '.tag_name')
              # name=$(echo "$release" | jq -r '.name')
              # created_at=$(echo "$release" | jq -r '.created_at')
              # echo "Release: $name"
              # echo "Tag: $tag_name"
              # echo "Created At: $created_at"

              ./importer/download_tag.sh "$tag_name"
          
              # echo "-------------------------"
            done
          fi
          tree ./importer/downloads/

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./importer/Dockerfile
          provenance: false
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/ps-documentation-builder:latest
          build-args: |
            PHRASEA_TAG=${{ env.PHRASEA_TAG }}
            PHRASEA_REF=${{ env.PHRASEA_REF }}
