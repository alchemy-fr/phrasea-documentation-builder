name: build-builder

on:
  repository_dispatch:
      types: [trigger-workflow]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: public.ecr.aws/alchemyfr/ps-databox-api-php
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

  # sent by workflow_dispatch from phrasea:on-push
  PHRASEA_REFNAME: ${{ github.event.client_payload.PHRASEA_REFNAME || '' }}
  PHRASEA_REFTYPE: ${{ github.event.client_payload.PHRASEA_REFTYPE || '' }}
  PHRASEA_DATETIME: ${{ github.event.client_payload.PHRASEA_DATETIME || '' }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: phrasea

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 30

      ### if workflow runs because a push of phrasea, prepare a single version of documentation

      - name: List and Pull single image
        if: ${{env.PHRASEA_REFTYPE == 'branch'}}
        run: |
          export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
          export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
          ./importer/download_tag.sh "${{env.PHRASEA_REFNAME}}"

      ### if workflow runs because a release, prepare all x.y.z versions of documentation

      - name: List and Pull all images from releases
        if: ${{env.PHRASEA_REFTYPE == 'tag'}}
        run: |
          echo "Fetching tags from github:phrasea releases"
          MIN_VERSION=$(echo '"'${{vars.MIN_VERSION}}'"' | jq '. | split(".") | map(. | tonumber) | .[0]*1000000 + .[1]*1000 + .[2]')
          # Fetch releases
          response=$(curl -s "https://api.github.com/repos/${{vars.PHRASEA_GITHUB}}/releases")

          # Check if the response is valid
          if [ $? -eq 0 ]; then
            export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
            export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
            echo "$response" | jq -c '[.[]] | map({"tag": .tag_name | split(".") | {major: .[0]|gsub("[^0-9]"; "")|tonumber, minor: .[1]|gsub("[^0-9]"; "")|tonumber, patch: .[2]|gsub("[^0-9]"; "")|tonumber, full: join(".")}, "all": .}) | map({"tag":(.tag + {"v":(.tag.major*1000000 + .tag.minor*1000 + .tag.patch)}), "all": .all }) | group_by(.tag.major, .tag.minor) | map(max_by(.tag.patch)) | map(select(.tag.v >= '${MIN_VERSION}')) | .[0:'${{vars.VERSIONS_COUNT}}']' > releases.json
            # docker cp releases.json ./importer/downloads
            # Loop through releases
            cat releases.json | jq -r '.[] | .all.tag_name' | while read -r tag_name; do
              ./importer/download_tag.sh "$tag_name"
            done
          fi

      - name: Dump downloads
        run: |
          tree ./importer/downloads    

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push image of single version
        if: ${{env.PHRASEA_REFTYPE == 'branch'}}
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./importer/Dockerfile
          provenance: false
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}/phrasea-documentation:${{env.PHRASEA_REFNAME}}
          build-args: |
            PHRASEA_REFNAME=${{ env.PHRASEA_REFNAME }}
            PHRASEA_REFTYPE=${{ env.PHRASEA_REFTYPE }}
            PHRASEA_DATETIME=${{ env.PHRASEA_DATETIME }}

      - name: Build and Push image of all versions
        if: ${{env.PHRASEA_REFTYPE == 'tag'}}
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./importer/Dockerfile
          provenance: false
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}/phrasea-documentation:${{env.PHRASEA_REFNAME}},${{ env.IMAGE_REGISTRY }}/phrasea-documentation:latest
          build-args: |
            PHRASEA_REFNAME=${{ env.PHRASEA_REFNAME }}
            PHRASEA_REFTYPE=${{ env.PHRASEA_REFTYPE }}
            PHRASEA_DATETIME=${{ env.PHRASEA_DATETIME }}
            
