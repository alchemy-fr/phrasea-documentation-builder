name: build-builder

on:
  repository_dispatch:
      types: [trigger-workflow]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_NAME: public.ecr.aws/alchemyfr/ps-fake-databox-api-php
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

  # sent by workflow_dispatch from phrasea:on-push
  PHRASEA_REFNAME: ${{ github.event.client_payload.PHRASEA_REFNAME || '' }}
  PHRASEA_REFTYPE: ${{ github.event.client_payload.PHRASEA_REFTYPE || '' }}
  PHRASEA_DATETIME: ${{ github.event.client_payload.PHRASEA_DATETIME || '' }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: sandbox-ci-documentation

    steps:

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "===== on_trigger-workflow.yaml ====="
          echo "------------ github context -----------" 
          echo "$GITHUB_CONTEXT"
      - name: Dump env context
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
        run: |
          echo "------------ env context -----------" 
          echo "$ENV_CONTEXT"
      - name: Dump vars
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: |
          echo "------------ vars context -----------" 
          echo "$VARS_CONTEXT"
        

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 30


      ### if workflow runs because a push of phrasea, prepare a single version of documentation

      - name: List and Pull single image
        if: ${{env.PHRASEA_REFTYPE == 'branch'}}
        run: |
          export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
          export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
          ./importer/download_tag.sh "${{env.PHRASEA_REFNAME}}"

          tree ./importer/downloads/  

      ### if workflow runs because a release, prepare all x.y.z versions of documentation

      - name: List and Pull all images from releases
        if: ${{env.PHRASEA_REFTYPE == 'tag'}}
        run: |
          echo "Fetching tags from github:phrasea releases"
          # Fetch releases
          # -------- to not explode api limits, use a static file for tests -----------
          # response=$(curl -s "https://api.github.com/repos/${{vars.PHRASEA_GITHUB}}/releases")
          response=$(cat ./releases_sandbox.json)
          # ---------------------------------------------------------------------------
          # Check if the response is valid
          if [ $? -eq 0 ]; then
            export PHRASEA_GITHUB=${{vars.PHRASEA_GITHUB}}
            export PHRASEA_IMAGES=${{vars.PHRASEA_IMAGES}}
            # Loop through releases
            echo "$response" | jq -c '[.[]] |  map({"tag": .tag_name | split(".")  | {major: .[0], minor: .[1], patch: .[2], full: join(".")}, "all": .}) |group_by(.tag.major, .tag.minor) | map(max_by(.tag.patch).all) | .[]' | while read -r release; do
              tag_name=$(echo "$release" | jq -r '.tag_name')
              # name=$(echo "$release" | jq -r '.name')
              # created_at=$(echo "$release" | jq -r '.created_at')
              # echo "Release: $name"
              # echo "Tag: $tag_name"
              # echo "Created At: $created_at"

              ./importer/download_tag.sh "$tag_name"

              # echo "-------------------------"
            done
          fi

          # also get next branch (master) for latest changes
          ./importer/download_tag.sh ${{vars.NEXT_BRANCH}}

          tree ./importer/downloads/


      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push image
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./importer/Dockerfile
          provenance: false
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/phrasea-documentation:${{env.PHRASEA_REFNAME}}
          build-args: |
            PHRASEA_REFNAME=${{ env.PHRASEA_REFNAME }}
            PHRASEA_REFTYPE=${{ env.PHRASEA_REFTYPE }}
            PHRASEA_DATETIME=${{ env.PHRASEA_DATETIME }}
